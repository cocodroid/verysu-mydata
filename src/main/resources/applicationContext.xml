<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:mydata="http://www.verysu.com/schema/mydata"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.verysu.com/schema/mydata http://www.verysu.com/schema/mydata/mydata.xsd
    ">
    
    <!-- 使用 annotation --> 
	<context:annotation-config />
	<!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 --> 
	<context:component-scan base-package="com.verysu.mydata"/>
	
	<!-- 参数配置 -->
	<!--<util:properties id="paramConfig" location="classpath:config/paramConfig.properties" />-->
	
	<!-- 数据库配置管理 -->
	<!--<import resource="dataSourceConfig.xml" />-->

    <!--<mydata:mydata batchSize="1000" id="mydata">-->
        <!--<mydata:sourceTable sql="select * from user1" delete="false" ></mydata:sourceTable>-->
        <!--<mydata:destTable sql="insert into user2(id,username,age) values(?,?,?)"></mydata:destTable>-->
    <!--</mydata:mydata>-->
    <!--<mydata:mydata batchSize="1000" id="mydata">-->
        <!--<mydata:sourceTable sql="select * from user1 where id > 100000" delete="false" ></mydata:sourceTable>-->
        <!--<mydata:destTable sql="insert into user4(id,username,age,createTime) values(?,?,?,NOW())" idField="id"-->
                          <!--idStrategy="com.verysu.mydata.id.TimestampAndRandomCharIdStrategy"/>-->
    <!--</mydata:mydata>-->
    <!--<mydata:mydata batchSize="1000" id="mydata">-->
        <!--<mydata:sourceTable sql="select * from user1 where id > 100000" delete="false" ></mydata:sourceTable>-->
        <!--<mydata:destTable sql="insert into user5(id,username,age,createTime) values(?,?,?,NOW())" idField="id"-->
                          <!--idStrategy="com.verysu.mydata.id.SnowflakeIdStrategy"/>-->
    <!--</mydata:mydata>-->
    <!--<mydata:mydata batchSize="1000" id="mydata">-->
        <!--<mydata:sourceTable sql="select * from user1 where id > 100000" delete="true" ></mydata:sourceTable>-->
        <!--<mydata:destTable sql="insert into user6(id,username,age,createTime) values(?,?,?,NOW())"/>-->
    <!--</mydata:mydata>-->
    <mydata:mydata batchSize="10000" id="mydata">
        <mydata:sourceTable sql="select * from user2 where id > 0" delete="false" ></mydata:sourceTable>
        <mydata:destTable sql="insert into user7(username,age,createTime) values(?,?,NOW())"/>
    </mydata:mydata>

    <!-- 配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:druid.properties</value>
        </property>
    </bean>

    <!-- Druid Datasource -->
    <bean id="sourceDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${druid.url}" />
        <property name="username" value="${druid.username}" />
        <!--<property name="password" value="123456" />-->
        <!--配置监控统计拦截的filters <property name="filters" value="stat" />  -->
        <property name="filters" value="config,stat,wall" />
        <!-- 密码加密:需要在filter上加config才生效 -->
        <property name="password"
                  value="${druid.password}" />
        <property name="connectionProperties" value="config.decrypt=true" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 定期把监控数据输出到日志中 -->
        <property name="timeBetweenLogStatsMillis" value="${druid.timeBetweenLogStatsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 连接泄漏 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${druid.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
    <bean id="destDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${druid.url}" />
        <property name="username" value="${druid.username}" />
        <!--<property name="password" value="123456" />-->
        <!--配置监控统计拦截的filters <property name="filters" value="stat" />  -->
        <property name="filters" value="config,stat,wall" />
        <!-- 密码加密:需要在filter上加config才生效 -->
        <property name="password"
                  value="${druid.password}" />
        <property name="connectionProperties" value="config.decrypt=true" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 定期把监控数据输出到日志中 -->
        <property name="timeBetweenLogStatsMillis" value="${druid.timeBetweenLogStatsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 连接泄漏 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${druid.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>

    <bean id="srcJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="sourceDataSource" />
    </bean>
    <bean id="destJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="destDataSource" />
    </bean>

    <bean id="destTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="destDataSource" />
    </bean>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethods"
                      expression=" execution(* com.verysu.mydata.dao.*.*(..))" />
        <aop:advisor pointcut-ref="serviceMethods" advice-ref="txAdvice" />
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="destTransactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

 </beans>